name: Release

on:
  workflow_dispatch:
    inputs:
      bump:
        type: choice
        description: 'lib bump type'
        required: true
        options:
          - major
          - minor
          - patch

jobs:
  release:
    name: 'Release to Github'
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.step_tag_id.outputs.new_tag }}
    env:
      DEFAULT_BRANCH: main

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Get new Tag Version
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git fetch --unshallow --tags
          OLD_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          case ${{ github.event.inputs.bump }} in
            major) echo "NEW_TAG=$(echo $OLD_TAG | awk -F. '{sub(/v/, "", $0)}; BEGIN {OFS="."}; {$1+=1;$2=0;$3=0;print "v"$0};')" >> $GITHUB_ENV ;;
            minor) echo "NEW_TAG=$(echo $OLD_TAG | awk -F. 'BEGIN {OFS="."}; {$2+=1;$3=0;print $0};')" >> $GITHUB_ENV ;;
            patch) echo "NEW_TAG=$(echo $OLD_TAG | awk -F. 'BEGIN {OFS="."}; {$3+=1;print $0};')" >> $GITHUB_ENV ;;
            *) echo "Opcao Invalida!" ;;
          esac

      - id: step_tag_id
        run: echo "::set-output name=new_tag::${{ env.NEW_TAG }}"

      - name: Select last Tag
        run: |
          echo "LAST_TAG=$(git describe --tags --always `git rev-list --tags --max-count=1`)" >> $GITHUB_ENV

      - name: Generate release body
        run: |
          echo "$(git log --graph --pretty=format:'%Cred%h%Creset %s %Cblue(%an)%Creset %Cgreen(%ci)%Creset' ${{ env.LAST_TAG }}..${{ env.DEFAULT_BRANCH }})" >> release_body

      - name: Create a GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: React Form Lego - Release ${{ env.NEW_TAG }}
          tag_name: ${{ env.NEW_TAG }}
          body_path: ./release_body

  package:
    name: 'Package to NPM'
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache-lib
        with:
          path: |
            node_modules
          key: ${{ hashFiles('yarn.lock') }}

      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'

      - name: NPM Generate package.json version
        run: |
          npm config set git-tag-version false
          npm version ${{ needs.release.outputs.new_tag }}

      - name: Install dependencies
        if: steps.cache-lib.outputs.cache-hit != 'true'
        run: yarn install

      - name: Build packages
        run: yarn build

      - name: Release packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release_delete:
    name: Remove release if failed
    needs: [release, package]
    if: failure()
    runs-on: ubuntu-latest

    steps:
      - name: Delete tag and release
        uses: jeconias/delete-tag-and-release@v0.2.0
        with:
          delete_release: true
          tag_name: ${{ needs.release.outputs.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
